---
import { getDefaultClient, fetchSinglePost } from '../db/redis'
import { decode } from '@devprotocol/clubs-core'
import { aperture } from 'ramda'
import { type Posts } from '../types'

const { name, feedId, scope, avatarImgSrc } = Astro.props

const fullUrl = Astro.request.url
const urlObject = new URL(fullUrl)
const url = urlObject.pathname
const [, postId] = aperture(2, url.split('/')).find(([p]) => p === feedId) ?? []

// Async function to fetch post data
async function fetchPostData() {
	try {
		if (postId === undefined) return null
		const client = await getDefaultClient()
		const post = await fetchSinglePost({
			id: postId,
			scope,
			client,
		})
		await client.quit()
		return post as Posts
	} catch (error) {
		console.error('Failed to fetch post data:', error)
		return null
	}
}

// Await the fetching data
const post = await fetchPostData()
const images = post?.options.find((item) => item.key === '#images')
	?.value as string[]
const image = images?.[0]
const defaultImage = 'https://i.imgur.com/1INcnkk.png'
const defaultTitle = `${name} - Post`

const truncatedDescription = ((desc) =>
	desc.slice(0, 139).join('') + (desc.length > 139 ? '...' : ''))([
	...(post?.content?.replace(/[\s|\n|\r\n|\r]/g, ' ') ?? ''),
])
---

<!doctype html>
<html>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg" href={avatarImgSrc || '/favicon.svg'} />
		<meta
			property="og:title"
			content={`${post?.title ? post.title : defaultTitle}`}
		/>
		<meta property="og:type" content="website" />
		<meta property="og:url" content={`${fullUrl}`} />
		<meta property="og:image" content={`${image ? image : defaultImage}`} />
		<meta
			property="og:description"
			content={`${truncatedDescription ? truncatedDescription : 'More...'}`}
		/>
		<meta property="og:site_name" content={`${name}`} />
		<meta name="twitter:card" content="summary_large_image" />
		<meta
			name="twitter:title"
			content={`${post?.title ? post.title : defaultTitle}`}
		/>
		<meta
			name="twitter:description"
			content={`${truncatedDescription ? truncatedDescription : ''}`}
		/>
		<meta name="twitter:image" content={`${image ? image : defaultImage}`} />
	</head>
	<body class="grid min-h-screen gap-5 font-body bg-white">
		<header>
			<slot name="clubs:connect-button" />
		</header>
		<main>
			<slot />
		</main>
	</body>
</html>
